"""
"""

import logging
log = logging.getLogger(__name__)

import datetime
import pytz

import sqlalchemy
import sqlalchemy.types
import sqlalchemy.orm
import sqlalchemy.event
import sqlalchemy.ext.hybrid

import {{project}}.models.auth
from {{project}} import models
from {{project}} import db


def init(settings):
    """
    """

    db_tz = settings['database.timezone']
    local_tz = settings['datetime.local_timezone']

    date_fmt = settings['datetime.date_format']
    time_fmt = settings['datetime.time_format']

    def now():
        now_utc = datetime.datetime.utcnow().replace(tzinfo=pytz.UTC)
        return now_utc.astimezone(db_tz)

    def default_expires(context):
        if context.current_parameters['flash'] is True:
            return now() + datetime.timedelta(days=1)
        else:
            return now() + datetime.timedelta(days=365)

    # SQLAlchemy Msg queue Model
    global Message
    class Message(models.Base):
        """A messaging model like this would be implemented using Redis
        or possibly RabbitMQ, but we offer SQL for a reference and for
        small scale deployments.
        """

        __tablename__ = "messages"

        __mapper_args__ = {
            'polymorphic_identity': False,
            'polymorphic_on': '_flash'
        }

        id = sqlalchemy.Column(sqlalchemy.types.Integer, primary_key=True)
        sender_id = sqlalchemy.Column(sqlalchemy.types.Integer,
                                    sqlalchemy.ForeignKey(models.auth.User.id),
                                    nullable=True)
        _flash = sqlalchemy.Column('flash', sqlalchemy.types.Boolean, default=False)
        stamp = sqlalchemy.Column(models.EpochSeconds,
                                    default=now)
        _expires = sqlalchemy.Column('expires', models.EpochSeconds,
                                    default=default_expires)
        message = sqlalchemy.Column(sqlalchemy.types.LargeBinary(length=1024))
        sender = sqlalchemy.orm.relationship(models.auth.User)
        targets = sqlalchemy.orm.relationship(models.auth.User,
                secondary=lambda: MessageTargets.__table__,
                primaryjoin=lambda: Message.id==MessageTargets.message_id,
                secondaryjoin=
                        lambda: MessageTargets.target_id==models.auth.User.id,
                backref="messages")

        @sqlalchemy.ext.hybrid.hybrid_property
        def expires(self):
            return self._expires

        @expires.setter
        def expires(self, seconds):
            self._expires = now() + datetime.timedelta(seconds=seconds)

        @expires.expression
        def expires(cls):
            return cls._expires

        def __json__(self, request):
            # Get the local_tz from request at some point.
            local_stamp = self.stamp.astimezone(local_tz)

            obj = {
                'id': self.id,
                'sender_id': self.sender_id,
                'flash': self._flash,
                'message': self.message.decode(),
                'stamp_date': self.stamp.strftime(date_fmt),
                'stamp_date_local': local_stamp.strftime(date_fmt),
                'stamp_time': self.stamp.strftime(time_fmt),
                'stamp_time_local': local_stamp.strftime(time_fmt)}

            return obj

    global FlashMessage
    class FlashMessage(Message):
        __mapper_args__ = {
            'polymorphic_identity':True,
        }

    global MessageTargets
    class MessageTargets(models.Base):
        """
        """

        __tablename__ = "message_targets"

        id = sqlalchemy.Column(sqlalchemy.types.Integer, primary_key=True)
        message_id = sqlalchemy.Column(sqlalchemy.types.Integer,
                                sqlalchemy.ForeignKey(Message.id,
                                                        ondelete="CASCADE"))
        target_id = sqlalchemy.Column(sqlalchemy.types.Integer,
                                sqlalchemy.ForeignKey(models.auth.User.id,
                                                        ondelete="CASCADE"))
        target = sqlalchemy.orm.relationship(models.auth.User)

    # Events
    ###
    global targets_remove_listener
    @sqlalchemy.event.listens_for(Message.targets, 'remove')
    def targets_remove_listener(message, removed_target, initiator):
        """Listens to ``targets`` attribute update on a ``Message``.
        Deletes the message when there are no more targets.
        """
        targets = (db.Session.query(MessageTargets)
                    .join(Message)
                    .filter(Message.id==message.id)
                    .count())

        if targets == 0:
            log.info("Message id:%s has no more targets. Deleting." %
                                                                    message.id)
            db.Session.delete(message)
            db.Session.flush()
            # For whatever reason, the ``targets`` query makes a
            # db.Session.delete(message) statement fail here. So
            # instead we query for the object and delete it.
            #(db.Session.query(Message)
            #    .filter(Message.id==message.id)
            #    .join(MessageTargets)
            #    .delete())

    global message_load_listener
    @sqlalchemy.event.listens_for(Message, 'load', propagate=True)
    def message_load_listener(message, context):
        """Check expire on Message object.
        """
        print("Checking message %s expire." % message.id)
        if now() >= message.expires:
            print("Expiring message %s." % message.id)
            db.Session.delete(message)
            db.Session.flush()

    global flash_message_load_listener
    @sqlalchemy.event.listens_for(FlashMessage, 'load')
    def flash_message_load_listener(message, context):
        """
        """
        if hasattr(context.query, '_user'):
            user = context.query._user  # There should be a better way
                                        # to pass query metadata here.
            #print("Flash message, removing from user's messages")
            # Use the relationship to remove the message from the
            #   user's queue.
            user.messages.remove(message)
        else:
            log.error("Flash Message Load Listener encountered a case where "
                        "no _user was set to the query.")

    # Util Functions
    ###
    global consume_iter
    def consume_iter(user, flash_only=False):
        """Yield the oldest message for a given ``user``. Remove the
        ``user`` as a target on the message. Remove the message if it
        has no more targets.
        """

        if flash_only is True:
            query = db.Session.query(FlashMessage)
        else:
            query = db.Session.query(Message)

        # Sets a reference to the consuming user for
        #    use in the ``message_load_listener``
        #    event.
        # TODO: Find a better way to accomplish this. (Good luck!!))
        query._user = user 

        for message in (query
                        .join(MessageTargets)
                        .filter(MessageTargets.target==user)
                        .order_by(Message.id.desc())
                        .all()):
            if sqlalchemy.inspect(message).deleted is False:
                yield message

    global send
    def send(sender, message, targets, expires=None, flash=False):
        send_targets = set()

        for target in targets:
            if isinstance(target, models.auth.Group):
                for user in target.users:
                    send_targets.add(user)
            else:
                send_targets.add(target)

        if not isinstance(message, bytes):
            message = message.encode()

        if flash is True:
            msg_class = FlashMessage
        else:
            msg_class = Message

        message = msg_class(sender=sender, message=message,
                            targets=list(send_targets),
                            expires=expires or default_expires())

        db.Session.add(message)

        return message

    global get
    def get(id_, user):
        """
        """

        try:
            message = (db.Session
                            .query(Message)
                            .join(MessageTargets)
                            .filter(Message.id==id_)
                            .filter(MessageTargets.target==user)
                            .one())
        except sqlalchemy.orm.exc.NoResultFound:
            return {}
        else:
            if sqlalchemy.inspect(message).deleted is False:
                 return message

    global remove_target
    def remove_target(id_, user):
        """
        """

        message = get(id_, user)
        if message:
            #if this_user in message.targets:
            message.targets.remove(user)
            return message