"""Database Models, Declarative Base and initialization.
"""

import datetime
import pytz
import sqlalchemy.types
import sqlalchemy.ext.declarative


Base = sqlalchemy.ext.declarative.declarative_base()


def init(settings):
    """Initialize configurable Models.
    """

    global EpochSeconds


    class EpochSeconds(sqlalchemy.types.TypeDecorator):
        impl = sqlalchemy.types.Integer
        epoch = (datetime.datetime.strptime(settings['database.epoch'],
                                            settings['datetime.date_format'])
                                    .replace(tzinfo=settings['database.timezone']))

        def process_bind_param(self, value, dialect):
            return (value - self.epoch).total_seconds()

        def process_result_value(self, value, dialect):
            return self.epoch + datetime.timedelta(seconds=value)


    class EpochDays(sqlalchemy.types.TypeDecorator):
        """
        http://docs.sqlalchemy.org/en/rel_0_9/core/types.html#sqlalchemy.types.TypeDecorator
        """
        impl = sqlalchemy.types.Integer
        epoch = (datetime.datetime.strptime(settings['database.epoch'],
                                            settings['datetime.date_format'])
                                    .replace(tzinfo=settings['database.timezone']))

        def process_bind_param(self, value, dialect):
            return (value - self.epoch).days

        def process_result_value(self, value, dialect):
            return self.epoch + datetime.timedelta(days=value)